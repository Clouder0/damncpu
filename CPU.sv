// Generated by CIRCT firtool-1.62.0
module Control(
  input  [31:0] in_inst,
  output        out_has_inst,
                out_ID_read1,
                out_ID_read2,
  output [1:0]  out_branch,
  output [3:0]  out_alu_op,
  output        out_alu_bsel,
  output [2:0]  out_sext_op,
  output        out_rf_we,
  output [1:0]  out_rf_wsel,
  output        out_ram_we
);

  wire            _out_ID_read2_T = in_inst[6:0] == 7'h33;
  wire            _out_ID_read1_T_1 = in_inst[6:0] == 7'h13;
  wire            _out_ID_read2_T_1 = in_inst[6:0] == 7'h3;
  wire            _out_ID_read2_T_5 = in_inst[6:0] == 7'h67;
  wire            _out_ID_read2_T_3 = in_inst[6:0] == 7'h23;
  wire            _out_ID_read2_T_7 = in_inst[6:0] == 7'h63;
  wire            _out_has_inst_T_11 = in_inst[6:0] == 7'h37;
  wire            _out_has_inst_T_13 = in_inst[6:0] == 7'h6F;
  wire            _GEN = _out_ID_read2_T | _out_ID_read1_T_1;
  wire            _GEN_0 = in_inst[14:12] == 3'h1;
  wire            _GEN_1 = in_inst[14:12] == 3'h5;
  wire [7:0][3:0] _GEN_2 =
    {{4'h2},
     {4'h3},
     {{3'h3, |(in_inst[31:25])}},
     {4'h4},
     {4'h0},
     {4'h0},
     {4'h5},
     {_out_ID_read2_T ? {3'h0, |(in_inst[31:25])} : 4'h0}};
  wire            _GEN_3 = _out_ID_read2_T_1 | _out_ID_read2_T_5;
  assign out_has_inst =
    _out_ID_read2_T | _out_ID_read1_T_1 | _out_ID_read2_T_1 | _out_ID_read2_T_5
    | _out_ID_read2_T_3 | _out_ID_read2_T_7 | _out_has_inst_T_11 | _out_has_inst_T_13;
  assign out_ID_read1 =
    _out_ID_read2_T | _out_ID_read1_T_1 | _out_ID_read2_T_1 | _out_ID_read2_T_3
    | _out_ID_read2_T_5 | _out_ID_read2_T_7;
  assign out_ID_read2 =
    _out_ID_read2_T | _out_ID_read2_T_1 | _out_ID_read2_T_3 | _out_ID_read2_T_5
    | _out_ID_read2_T_7;
  assign out_branch =
    _out_ID_read2_T_7 ? 2'h1 : _out_has_inst_T_13 ? 2'h2 : {2{_out_ID_read2_T_5}};
  assign out_alu_op =
    _GEN
      ? _GEN_2[in_inst[14:12]]
      : _out_ID_read2_T_1 | _out_ID_read2_T_5 | _out_ID_read2_T_3 | ~_out_ID_read2_T_7
          ? 4'h0
          : in_inst[14:12] == 3'h0
              ? 4'h8
              : _GEN_0 ? 4'h9 : in_inst[14:12] == 3'h4 ? 4'hA : _GEN_1 ? 4'hB : 4'h8;
  assign out_alu_bsel =
    ~_out_ID_read2_T & (_out_ID_read1_T_1 | _GEN_3 | _out_ID_read2_T_3);
  assign out_sext_op =
    _out_ID_read1_T_1
      ? (_GEN_0 | _GEN_1 ? 3'h5 : 3'h0)
      : _GEN_3
          ? 3'h0
          : _out_ID_read2_T_3
              ? 3'h1
              : _out_ID_read2_T_7
                  ? 3'h2
                  : _out_has_inst_T_11 ? 3'h3 : {_out_has_inst_T_13, 2'h0};
  assign out_rf_we = ~(_out_ID_read2_T_3 | _out_ID_read2_T_7);
  assign out_rf_wsel =
    _GEN ? 2'h0 : _out_ID_read2_T_1 ? 2'h1 : {1'h1, ~_out_has_inst_T_11};
  assign out_ram_we = _out_ID_read2_T_3;
endmodule

module ALU(
  input  [31:0] in_a,
                in_b,
                in_imm,
  input         in_sel,
  input  [3:0]  in_alu_op,
  output [31:0] out_res,
  output        out_br
);

  wire [31:0] b_ = in_sel ? in_imm : in_b;
  wire        _GEN = in_alu_op == 4'h0;
  wire        _GEN_0 = in_alu_op == 4'h1;
  wire        _GEN_1 = in_alu_op == 4'h2;
  wire        _GEN_2 = in_alu_op == 4'h3;
  wire        _GEN_3 = in_alu_op == 4'h4;
  wire        _GEN_4 = in_alu_op == 4'h5;
  wire [62:0] _out_res_T_7 = {31'h0, in_a} << b_[4:0];
  wire        _GEN_5 = in_alu_op == 4'h6;
  wire [31:0] _GEN_6 = {27'h0, b_[4:0]};
  wire        _GEN_7 = in_alu_op == 4'h7;
  assign out_res =
    _GEN
      ? in_a + b_
      : _GEN_0
          ? in_a - b_
          : _GEN_1
              ? in_a & b_
              : _GEN_2
                  ? in_a | b_
                  : _GEN_3
                      ? in_a ^ b_
                      : _GEN_4
                          ? _out_res_T_7[31:0]
                          : _GEN_5
                              ? in_a >> _GEN_6
                              : _GEN_7 ? $signed($signed(in_a) >>> _GEN_6) : 32'h0;
  assign out_br =
    ~(_GEN | _GEN_0 | _GEN_1 | _GEN_2 | _GEN_3 | _GEN_4 | _GEN_5 | _GEN_7)
    & (in_alu_op == 4'h8
         ? in_a == b_
         : in_alu_op == 4'h9
             ? in_a != b_
             : in_alu_op == 4'hA
                 ? $signed(in_a) < $signed(b_)
                 : in_alu_op == 4'hB & $signed(in_a) >= $signed(b_));
endmodule

module PC(
  input         clock,
                reset,
  input  [31:0] in_din,
  input         in_stall,
  output [31:0] out_pc
);

  reg [31:0] output_0;
  reg [1:0]  flag;
  always @(posedge clock) begin
    if (reset) begin
      output_0 <= 32'h0;
      flag <= 2'h0;
    end
    else begin
      if (in_stall) begin
      end
      else
        output_0 <= flag == 2'h1 ? in_din : 32'h0;
      if (flag == 2'h0)
        flag <= 2'h1;
    end
  end // always @(posedge)
  assign out_pc = output_0;
endmodule

module NPC(
  input  [31:0] in_pc,
  input         in_jump,
  input  [31:0] in_pc_jump,
  output [31:0] out_npc
);

  assign out_npc = in_jump ? in_pc_jump : in_pc + 32'h4;
endmodule

module RF(
  input         clock,
                reset,
  input  [4:0]  in_rR1,
                in_rR2,
                in_wR,
  input  [31:0] in_wD,
  input         in_we,
  output [31:0] out_rD1,
                out_rD2
);

  reg  [31:0]       regs_0;
  reg  [31:0]       regs_1;
  reg  [31:0]       regs_2;
  reg  [31:0]       regs_3;
  reg  [31:0]       regs_4;
  reg  [31:0]       regs_5;
  reg  [31:0]       regs_6;
  reg  [31:0]       regs_7;
  reg  [31:0]       regs_8;
  reg  [31:0]       regs_9;
  reg  [31:0]       regs_10;
  reg  [31:0]       regs_11;
  reg  [31:0]       regs_12;
  reg  [31:0]       regs_13;
  reg  [31:0]       regs_14;
  reg  [31:0]       regs_15;
  reg  [31:0]       regs_16;
  reg  [31:0]       regs_17;
  reg  [31:0]       regs_18;
  reg  [31:0]       regs_19;
  reg  [31:0]       regs_20;
  reg  [31:0]       regs_21;
  reg  [31:0]       regs_22;
  reg  [31:0]       regs_23;
  reg  [31:0]       regs_24;
  reg  [31:0]       regs_25;
  reg  [31:0]       regs_26;
  reg  [31:0]       regs_27;
  reg  [31:0]       regs_28;
  reg  [31:0]       regs_29;
  reg  [31:0]       regs_30;
  reg  [31:0]       regs_31;
  wire [31:0][31:0] _GEN =
    {{regs_31},
     {regs_30},
     {regs_29},
     {regs_28},
     {regs_27},
     {regs_26},
     {regs_25},
     {regs_24},
     {regs_23},
     {regs_22},
     {regs_21},
     {regs_20},
     {regs_19},
     {regs_18},
     {regs_17},
     {regs_16},
     {regs_15},
     {regs_14},
     {regs_13},
     {regs_12},
     {regs_11},
     {regs_10},
     {regs_9},
     {regs_8},
     {regs_7},
     {regs_6},
     {regs_5},
     {regs_4},
     {regs_3},
     {regs_2},
     {regs_1},
     {regs_0}};
  always @(posedge clock) begin
    if (reset) begin
      regs_0 <= 32'h0;
      regs_1 <= 32'h0;
      regs_2 <= 32'h0;
      regs_3 <= 32'h0;
      regs_4 <= 32'h0;
      regs_5 <= 32'h0;
      regs_6 <= 32'h0;
      regs_7 <= 32'h0;
      regs_8 <= 32'h0;
      regs_9 <= 32'h0;
      regs_10 <= 32'h0;
      regs_11 <= 32'h0;
      regs_12 <= 32'h0;
      regs_13 <= 32'h0;
      regs_14 <= 32'h0;
      regs_15 <= 32'h0;
      regs_16 <= 32'h0;
      regs_17 <= 32'h0;
      regs_18 <= 32'h0;
      regs_19 <= 32'h0;
      regs_20 <= 32'h0;
      regs_21 <= 32'h0;
      regs_22 <= 32'h0;
      regs_23 <= 32'h0;
      regs_24 <= 32'h0;
      regs_25 <= 32'h0;
      regs_26 <= 32'h0;
      regs_27 <= 32'h0;
      regs_28 <= 32'h0;
      regs_29 <= 32'h0;
      regs_30 <= 32'h0;
      regs_31 <= 32'h0;
    end
    else begin
      automatic logic _GEN_0 = in_we & (|in_wR);
      if (_GEN_0 & ~(|in_wR))
        regs_0 <= in_wD;
      if (_GEN_0 & in_wR == 5'h1)
        regs_1 <= in_wD;
      if (_GEN_0 & in_wR == 5'h2)
        regs_2 <= in_wD;
      if (_GEN_0 & in_wR == 5'h3)
        regs_3 <= in_wD;
      if (_GEN_0 & in_wR == 5'h4)
        regs_4 <= in_wD;
      if (_GEN_0 & in_wR == 5'h5)
        regs_5 <= in_wD;
      if (_GEN_0 & in_wR == 5'h6)
        regs_6 <= in_wD;
      if (_GEN_0 & in_wR == 5'h7)
        regs_7 <= in_wD;
      if (_GEN_0 & in_wR == 5'h8)
        regs_8 <= in_wD;
      if (_GEN_0 & in_wR == 5'h9)
        regs_9 <= in_wD;
      if (_GEN_0 & in_wR == 5'hA)
        regs_10 <= in_wD;
      if (_GEN_0 & in_wR == 5'hB)
        regs_11 <= in_wD;
      if (_GEN_0 & in_wR == 5'hC)
        regs_12 <= in_wD;
      if (_GEN_0 & in_wR == 5'hD)
        regs_13 <= in_wD;
      if (_GEN_0 & in_wR == 5'hE)
        regs_14 <= in_wD;
      if (_GEN_0 & in_wR == 5'hF)
        regs_15 <= in_wD;
      if (_GEN_0 & in_wR == 5'h10)
        regs_16 <= in_wD;
      if (_GEN_0 & in_wR == 5'h11)
        regs_17 <= in_wD;
      if (_GEN_0 & in_wR == 5'h12)
        regs_18 <= in_wD;
      if (_GEN_0 & in_wR == 5'h13)
        regs_19 <= in_wD;
      if (_GEN_0 & in_wR == 5'h14)
        regs_20 <= in_wD;
      if (_GEN_0 & in_wR == 5'h15)
        regs_21 <= in_wD;
      if (_GEN_0 & in_wR == 5'h16)
        regs_22 <= in_wD;
      if (_GEN_0 & in_wR == 5'h17)
        regs_23 <= in_wD;
      if (_GEN_0 & in_wR == 5'h18)
        regs_24 <= in_wD;
      if (_GEN_0 & in_wR == 5'h19)
        regs_25 <= in_wD;
      if (_GEN_0 & in_wR == 5'h1A)
        regs_26 <= in_wD;
      if (_GEN_0 & in_wR == 5'h1B)
        regs_27 <= in_wD;
      if (_GEN_0 & in_wR == 5'h1C)
        regs_28 <= in_wD;
      if (_GEN_0 & in_wR == 5'h1D)
        regs_29 <= in_wD;
      if (_GEN_0 & in_wR == 5'h1E)
        regs_30 <= in_wD;
      if (_GEN_0 & (&in_wR))
        regs_31 <= in_wD;
    end
  end // always @(posedge)
  assign out_rD1 = _GEN[in_rR1];
  assign out_rD2 = _GEN[in_rR2];
endmodule

module SEXT(
  input  [24:0] in_din,
  input  [2:0]  in_op,
  output [31:0] out_dout
);

  wire [7:0][31:0] _GEN =
    {{32'h0},
     {32'h0},
     {{27'h0, in_din[17:13]}},
     {{{12{in_din[24]}}, in_din[12:5], in_din[13], in_din[23:14], 1'h0}},
     {{in_din[24:5], 12'h0}},
     {{{20{in_din[24]}}, in_din[0], in_din[23:18], in_din[4:1], 1'h0}},
     {{{20{in_din[24]}}, in_din[24:18], in_din[4:0]}},
     {{{20{in_din[24]}}, in_din[24:13]}}};
  assign out_dout = _GEN[in_op];
endmodule

module JumpMux(
  input  [1:0]  in_branch,
  input         in_bf,
  input  [31:0] in_pc,
                in_imm,
                in_alu_res,
  output        out_jump,
  output [31:0] out_pc_jump
);

  assign out_jump = in_branch == 2'h1 & in_bf | in_branch == 2'h2 | (&in_branch);
  assign out_pc_jump =
    in_branch == 2'h0 ? in_pc + 32'h4 : (&in_branch) ? in_alu_res : in_pc + in_imm;
endmodule

module PipelineReg(
  input         clock,
                reset,
  input  [31:0] in_pc,
                in_inst,
  output [31:0] out_pc,
                out_inst,
  input         signal_stall,
                signal_flush
);

  reg [31:0] reg_pc;
  reg [31:0] reg_inst;
  always @(posedge clock) begin
    if (reset) begin
      reg_pc <= 32'h0;
      reg_inst <= 32'h0;
    end
    else if (signal_flush) begin
      reg_pc <= 32'h0;
      reg_inst <= 32'h0;
    end
    else if (signal_stall) begin
    end
    else begin
      reg_pc <= in_pc;
      reg_inst <= in_inst;
    end
  end // always @(posedge)
  assign out_pc = reg_pc;
  assign out_inst = reg_inst;
endmodule

module REG_IF_ID(
  input         clock,
                reset,
                signal_stall,
                signal_flush,
  input  [31:0] in_data_pc,
                in_data_inst,
  output [31:0] out_data_pc,
                out_data_inst
);

  PipelineReg reg_0 (
    .clock        (clock),
    .reset        (reset),
    .in_pc        (in_data_pc),
    .in_inst      (in_data_inst),
    .out_pc       (out_data_pc),
    .out_inst     (out_data_inst),
    .signal_stall (signal_stall),
    .signal_flush (signal_flush)
  );
endmodule

module PipelineReg_1(
  input         clock,
                reset,
  input  [4:0]  in_wR,
  input  [31:0] in_pc,
                in_imm,
  input         in_has_inst,
  input  [1:0]  in_rf_wsel,
  input         in_rf_we,
  input  [1:0]  in_branch,
  input         in_ram_we,
  input  [3:0]  in_alu_op,
  input         in_alu_bsel,
  output [4:0]  out_wR,
  output [31:0] out_pc,
                out_imm,
  output        out_has_inst,
  output [1:0]  out_rf_wsel,
  output        out_rf_we,
  output [1:0]  out_branch,
  output        out_ram_we,
  output [3:0]  out_alu_op,
  output        out_alu_bsel,
  input         signal_flush
);

  reg [4:0]  reg_wR;
  reg [31:0] reg_pc;
  reg [31:0] reg_imm;
  reg        reg_has_inst;
  reg [1:0]  reg_rf_wsel;
  reg        reg_rf_we;
  reg [1:0]  reg_branch;
  reg        reg_ram_we;
  reg [3:0]  reg_alu_op;
  reg        reg_alu_bsel;
  always @(posedge clock) begin
    if (reset) begin
      reg_wR <= 5'h0;
      reg_pc <= 32'h0;
      reg_imm <= 32'h0;
      reg_has_inst <= 1'h0;
      reg_rf_wsel <= 2'h0;
      reg_rf_we <= 1'h0;
      reg_branch <= 2'h0;
      reg_ram_we <= 1'h0;
      reg_alu_op <= 4'h0;
      reg_alu_bsel <= 1'h0;
    end
    else begin
      reg_wR <= signal_flush ? 5'h0 : in_wR;
      reg_pc <= signal_flush ? 32'h0 : in_pc;
      reg_imm <= signal_flush ? 32'h0 : in_imm;
      reg_has_inst <= ~signal_flush & in_has_inst;
      reg_rf_wsel <= signal_flush ? 2'h0 : in_rf_wsel;
      reg_rf_we <= ~signal_flush & in_rf_we;
      reg_branch <= signal_flush ? 2'h0 : in_branch;
      reg_ram_we <= ~signal_flush & in_ram_we;
      reg_alu_op <= signal_flush ? 4'h0 : in_alu_op;
      reg_alu_bsel <= ~signal_flush & in_alu_bsel;
    end
  end // always @(posedge)
  assign out_wR = reg_wR;
  assign out_pc = reg_pc;
  assign out_imm = reg_imm;
  assign out_has_inst = reg_has_inst;
  assign out_rf_wsel = reg_rf_wsel;
  assign out_rf_we = reg_rf_we;
  assign out_branch = reg_branch;
  assign out_ram_we = reg_ram_we;
  assign out_alu_op = reg_alu_op;
  assign out_alu_bsel = reg_alu_bsel;
endmodule

module REG_ID_EX(
  input         clock,
                reset,
                signal_flush,
                forward_forward_op1,
                forward_forward_op2,
  input  [31:0] forward_forward_rD1,
                forward_forward_rD2,
  input  [4:0]  in_basic_data_wR,
  input  [31:0] in_basic_data_pc,
                in_basic_data_imm,
  input         in_basic_data_has_inst,
  input  [1:0]  in_basic_data_rf_wsel,
  input         in_basic_data_rf_we,
  input  [1:0]  in_basic_data_branch,
  input         in_basic_data_ram_we,
  input  [3:0]  in_basic_data_alu_op,
  input         in_basic_data_alu_bsel,
  output [4:0]  out_basic_data_wR,
  output [31:0] out_basic_data_pc,
                out_basic_data_imm,
  output        out_basic_data_has_inst,
  output [1:0]  out_basic_data_rf_wsel,
  output        out_basic_data_rf_we,
  output [1:0]  out_basic_data_branch,
  output        out_basic_data_ram_we,
  output [3:0]  out_basic_data_alu_op,
  output        out_basic_data_alu_bsel,
  input  [31:0] in_reg_rD1,
                in_reg_rD2,
  output [31:0] out_reg_rD1,
                out_reg_rD2
);

  PipelineReg_1 reg_0 (
    .clock        (clock),
    .reset        (reset),
    .in_wR        (in_basic_data_wR),
    .in_pc        (in_basic_data_pc),
    .in_imm       (in_basic_data_imm),
    .in_has_inst  (in_basic_data_has_inst),
    .in_rf_wsel   (in_basic_data_rf_wsel),
    .in_rf_we     (in_basic_data_rf_we),
    .in_branch    (in_basic_data_branch),
    .in_ram_we    (in_basic_data_ram_we),
    .in_alu_op    (in_basic_data_alu_op),
    .in_alu_bsel  (in_basic_data_alu_bsel),
    .out_wR       (out_basic_data_wR),
    .out_pc       (out_basic_data_pc),
    .out_imm      (out_basic_data_imm),
    .out_has_inst (out_basic_data_has_inst),
    .out_rf_wsel  (out_basic_data_rf_wsel),
    .out_rf_we    (out_basic_data_rf_we),
    .out_branch   (out_basic_data_branch),
    .out_ram_we   (out_basic_data_ram_we),
    .out_alu_op   (out_basic_data_alu_op),
    .out_alu_bsel (out_basic_data_alu_bsel),
    .signal_flush (signal_flush)
  );
  PipelineReg r_reg (
    .clock        (clock),
    .reset        (reset),
    .in_pc        (forward_forward_op1 ? forward_forward_rD1 : in_reg_rD1),
    .in_inst      (forward_forward_op2 ? forward_forward_rD2 : in_reg_rD2),
    .out_pc       (out_reg_rD1),
    .out_inst     (out_reg_rD2),
    .signal_stall (1'h0),
    .signal_flush (signal_flush)
  );
endmodule

module PipelineReg_3(
  input         clock,
                reset,
  input  [4:0]  in_wR,
  input  [31:0] in_wD,
                in_pc,
                in_rD2,
                in_alu_res,
  input         in_has_inst,
  input  [1:0]  in_rf_wsel,
  input         in_rf_we,
                in_ram_we,
  output [4:0]  out_wR,
  output [31:0] out_wD,
                out_pc,
                out_rD2,
                out_alu_res,
  output        out_has_inst,
  output [1:0]  out_rf_wsel,
  output        out_rf_we,
                out_ram_we
);

  reg [4:0]  reg_wR;
  reg [31:0] reg_wD;
  reg [31:0] reg_pc;
  reg [31:0] reg_rD2;
  reg [31:0] reg_alu_res;
  reg        reg_has_inst;
  reg [1:0]  reg_rf_wsel;
  reg        reg_rf_we;
  reg        reg_ram_we;
  always @(posedge clock) begin
    if (reset) begin
      reg_wR <= 5'h0;
      reg_wD <= 32'h0;
      reg_pc <= 32'h0;
      reg_rD2 <= 32'h0;
      reg_alu_res <= 32'h0;
      reg_has_inst <= 1'h0;
      reg_rf_wsel <= 2'h0;
      reg_rf_we <= 1'h0;
      reg_ram_we <= 1'h0;
    end
    else begin
      reg_wR <= in_wR;
      reg_wD <= in_wD;
      reg_pc <= in_pc;
      reg_rD2 <= in_rD2;
      reg_alu_res <= in_alu_res;
      reg_has_inst <= in_has_inst;
      reg_rf_wsel <= in_rf_wsel;
      reg_rf_we <= in_rf_we;
      reg_ram_we <= in_ram_we;
    end
  end // always @(posedge)
  assign out_wR = reg_wR;
  assign out_wD = reg_wD;
  assign out_pc = reg_pc;
  assign out_rD2 = reg_rD2;
  assign out_alu_res = reg_alu_res;
  assign out_has_inst = reg_has_inst;
  assign out_rf_wsel = reg_rf_wsel;
  assign out_rf_we = reg_rf_we;
  assign out_ram_we = reg_ram_we;
endmodule

module REG_EX_MEM(
  input         clock,
                reset,
  input  [4:0]  in_data_wR,
  input  [31:0] in_data_wD,
                in_data_pc,
                in_data_rD2,
                in_data_alu_res,
  input         in_data_has_inst,
  input  [1:0]  in_data_rf_wsel,
  input         in_data_rf_we,
                in_data_ram_we,
  output [4:0]  out_data_wR,
  output [31:0] out_data_wD,
                out_data_pc,
                out_data_rD2,
                out_data_alu_res,
  output        out_data_has_inst,
  output [1:0]  out_data_rf_wsel,
  output        out_data_rf_we,
                out_data_ram_we
);

  PipelineReg_3 reg_0 (
    .clock        (clock),
    .reset        (reset),
    .in_wR        (in_data_wR),
    .in_wD        (in_data_wD),
    .in_pc        (in_data_pc),
    .in_rD2       (in_data_rD2),
    .in_alu_res   (in_data_alu_res),
    .in_has_inst  (in_data_has_inst),
    .in_rf_wsel   (in_data_rf_wsel),
    .in_rf_we     (in_data_rf_we),
    .in_ram_we    (in_data_ram_we),
    .out_wR       (out_data_wR),
    .out_wD       (out_data_wD),
    .out_pc       (out_data_pc),
    .out_rD2      (out_data_rD2),
    .out_alu_res  (out_data_alu_res),
    .out_has_inst (out_data_has_inst),
    .out_rf_wsel  (out_data_rf_wsel),
    .out_rf_we    (out_data_rf_we),
    .out_ram_we   (out_data_ram_we)
  );
endmodule

module PipelineReg_4(
  input         clock,
                reset,
  input  [4:0]  in_wR,
  input  [31:0] in_wD,
                in_pc,
  input         in_we,
                in_has_inst,
  output [4:0]  out_wR,
  output [31:0] out_wD,
                out_pc,
  output        out_we,
                out_has_inst
);

  reg [4:0]  reg_wR;
  reg [31:0] reg_wD;
  reg [31:0] reg_pc;
  reg        reg_we;
  reg        reg_has_inst;
  always @(posedge clock) begin
    if (reset) begin
      reg_wR <= 5'h0;
      reg_wD <= 32'h0;
      reg_pc <= 32'h0;
      reg_we <= 1'h0;
      reg_has_inst <= 1'h0;
    end
    else begin
      reg_wR <= in_wR;
      reg_wD <= in_wD;
      reg_pc <= in_pc;
      reg_we <= in_we;
      reg_has_inst <= in_has_inst;
    end
  end // always @(posedge)
  assign out_wR = reg_wR;
  assign out_wD = reg_wD;
  assign out_pc = reg_pc;
  assign out_we = reg_we;
  assign out_has_inst = reg_has_inst;
endmodule

module REG_MEM_WB(
  input         clock,
                reset,
  input  [4:0]  in_data_wR,
  input  [31:0] in_data_wD,
                in_data_pc,
  input         in_data_we,
                in_data_has_inst,
  output [4:0]  out_data_wR,
  output [31:0] out_data_wD,
                out_data_pc,
  output        out_data_we,
                out_data_has_inst
);

  PipelineReg_4 reg_0 (
    .clock        (clock),
    .reset        (reset),
    .in_wR        (in_data_wR),
    .in_wD        (in_data_wD),
    .in_pc        (in_data_pc),
    .in_we        (in_data_we),
    .in_has_inst  (in_data_has_inst),
    .out_wR       (out_data_wR),
    .out_wD       (out_data_wD),
    .out_pc       (out_data_pc),
    .out_we       (out_data_we),
    .out_has_inst (out_data_has_inst)
  );
endmodule

module DataHazardDetector(
  input         in_ID_readR1,
                in_ID_readR2,
  input  [4:0]  in_ID_rR1,
                in_ID_rR2,
  input  [1:0]  in_EX_rf_wsel,
  input         in_EX_rf_wen,
  input  [4:0]  in_EX_wR,
  input  [31:0] in_EX_wD,
  input         in_MEM_rf_wen,
  input  [4:0]  in_MEM_wR,
  input  [31:0] in_MEM_wD,
  input         in_WB_rf_wen,
  input  [4:0]  in_WB_wR,
  input  [31:0] in_WB_wD,
  output        out_stall_REG_IF_ID,
                out_flush_REG_ID_EX,
                out_stall_PC,
                out_forward_op1,
                out_forward_op2,
  output [31:0] out_forward_rD1,
                out_forward_rD2
);

  wire RAW_EX_rR1 = in_EX_rf_wen & in_ID_readR1 & in_ID_rR1 == in_EX_wR & (|in_EX_wR);
  wire RAW_EX_rR2 = in_EX_rf_wen & in_ID_readR2 & in_ID_rR2 == in_EX_wR & (|in_EX_wR);
  wire RAW_MEM_rR1 = in_MEM_rf_wen & in_ID_readR1 & in_ID_rR1 == in_MEM_wR & (|in_MEM_wR);
  wire RAW_MEM_rR2 = in_MEM_rf_wen & in_ID_readR2 & in_ID_rR2 == in_MEM_wR & (|in_MEM_wR);
  wire load_use = (RAW_EX_rR1 | RAW_EX_rR2) & in_EX_rf_wsel == 2'h1;
  assign out_stall_REG_IF_ID = load_use;
  assign out_flush_REG_ID_EX = load_use;
  assign out_stall_PC = load_use;
  assign out_forward_op1 =
    RAW_EX_rR1 | RAW_MEM_rR1 | in_WB_rf_wen & in_ID_readR1 & in_ID_rR1 == in_WB_wR
    & (|in_WB_wR);
  assign out_forward_op2 =
    RAW_EX_rR2 | RAW_MEM_rR2 | in_WB_rf_wen & in_ID_readR2 & in_ID_rR2 == in_WB_wR
    & (|in_WB_wR);
  assign out_forward_rD1 = RAW_EX_rR1 ? in_EX_wD : RAW_MEM_rR1 ? in_MEM_wD : in_WB_wD;
  assign out_forward_rD2 = RAW_EX_rR2 ? in_EX_wD : RAW_MEM_rR2 ? in_MEM_wD : in_WB_wD;
endmodule

module ControlHazardDectector(
  input  in_is_control_hazard,
  output out_flush_REG_IF_ID,
         out_flush_REG_ID_EX
);

  assign out_flush_REG_IF_ID = in_is_control_hazard;
  assign out_flush_REG_ID_EX = in_is_control_hazard;
endmodule

module RFMux1(
  input  [1:0]  in_wsel,
  input  [31:0] in_from_alu,
                in_from_imm,
                in_from_pc,
  output [31:0] out_wD
);

  wire [3:0][31:0] _GEN = {{in_from_pc + 32'h4}, {in_from_imm}, {32'h0}, {in_from_alu}};
  assign out_wD = _GEN[in_wsel];
endmodule

module RFMux2(
  input  [1:0]  in_wsel,
  input  [31:0] in_wD,
                in_from_dram,
  output [31:0] out_wD
);

  assign out_wD = in_wsel == 2'h1 ? in_from_dram : in_wD;
endmodule

module CPU(
  input         clock,
                reset,
  output [15:0] io_irom_inst_addr,
  input  [31:0] io_irom_inst,
  output [31:0] io_bus_addr,
  output        io_bus_we,
  input  [31:0] io_bus_bus_in,
  output [31:0] io_bus_bus_out,
  output        trace_have_inst,
  output [31:0] trace_pc,
  output        trace_ena,
  output [4:0]  trace_wb_reg,
  output [31:0] trace_wb_value
);

  wire [31:0] _rf_mux2_out_wD;
  wire [31:0] _rf_mux1_out_wD;
  wire        _control_hazard_detector_out_flush_REG_IF_ID;
  wire        _control_hazard_detector_out_flush_REG_ID_EX;
  wire        _data_hazard_detector_out_stall_REG_IF_ID;
  wire        _data_hazard_detector_out_flush_REG_ID_EX;
  wire        _data_hazard_detector_out_stall_PC;
  wire        _data_hazard_detector_out_forward_op1;
  wire        _data_hazard_detector_out_forward_op2;
  wire [31:0] _data_hazard_detector_out_forward_rD1;
  wire [31:0] _data_hazard_detector_out_forward_rD2;
  wire [4:0]  _reg_mem_wb_out_data_wR;
  wire [31:0] _reg_mem_wb_out_data_wD;
  wire        _reg_mem_wb_out_data_we;
  wire [4:0]  _reg_ex_mem_out_data_wR;
  wire [31:0] _reg_ex_mem_out_data_wD;
  wire [31:0] _reg_ex_mem_out_data_pc;
  wire        _reg_ex_mem_out_data_has_inst;
  wire [1:0]  _reg_ex_mem_out_data_rf_wsel;
  wire        _reg_ex_mem_out_data_rf_we;
  wire [4:0]  _reg_id_ex_out_basic_data_wR;
  wire [31:0] _reg_id_ex_out_basic_data_pc;
  wire [31:0] _reg_id_ex_out_basic_data_imm;
  wire        _reg_id_ex_out_basic_data_has_inst;
  wire [1:0]  _reg_id_ex_out_basic_data_rf_wsel;
  wire        _reg_id_ex_out_basic_data_rf_we;
  wire [1:0]  _reg_id_ex_out_basic_data_branch;
  wire        _reg_id_ex_out_basic_data_ram_we;
  wire [3:0]  _reg_id_ex_out_basic_data_alu_op;
  wire        _reg_id_ex_out_basic_data_alu_bsel;
  wire [31:0] _reg_id_ex_out_reg_rD1;
  wire [31:0] _reg_id_ex_out_reg_rD2;
  wire [31:0] _reg_if_id_out_data_pc;
  wire [31:0] _reg_if_id_out_data_inst;
  wire        _i_jump_out_jump;
  wire [31:0] _i_jump_out_pc_jump;
  wire [31:0] _i_sext_out_dout;
  wire [31:0] _i_rf_out_rD1;
  wire [31:0] _i_rf_out_rD2;
  wire [31:0] _i_npc_out_npc;
  wire [31:0] _i_pc_out_pc;
  wire [31:0] _i_alu_out_res;
  wire        _i_alu_out_br;
  wire        _i_ctrl_out_has_inst;
  wire        _i_ctrl_out_ID_read1;
  wire        _i_ctrl_out_ID_read2;
  wire [1:0]  _i_ctrl_out_branch;
  wire [3:0]  _i_ctrl_out_alu_op;
  wire        _i_ctrl_out_alu_bsel;
  wire [2:0]  _i_ctrl_out_sext_op;
  wire        _i_ctrl_out_rf_we;
  wire [1:0]  _i_ctrl_out_rf_wsel;
  wire        _i_ctrl_out_ram_we;
  Control i_ctrl (
    .in_inst      (_reg_if_id_out_data_inst),
    .out_has_inst (_i_ctrl_out_has_inst),
    .out_ID_read1 (_i_ctrl_out_ID_read1),
    .out_ID_read2 (_i_ctrl_out_ID_read2),
    .out_branch   (_i_ctrl_out_branch),
    .out_alu_op   (_i_ctrl_out_alu_op),
    .out_alu_bsel (_i_ctrl_out_alu_bsel),
    .out_sext_op  (_i_ctrl_out_sext_op),
    .out_rf_we    (_i_ctrl_out_rf_we),
    .out_rf_wsel  (_i_ctrl_out_rf_wsel),
    .out_ram_we   (_i_ctrl_out_ram_we)
  );
  ALU i_alu (
    .in_a      (_reg_id_ex_out_reg_rD1),
    .in_b      (_reg_id_ex_out_reg_rD2),
    .in_imm    (_reg_id_ex_out_basic_data_imm),
    .in_sel    (_reg_id_ex_out_basic_data_alu_bsel),
    .in_alu_op (_reg_id_ex_out_basic_data_alu_op),
    .out_res   (_i_alu_out_res),
    .out_br    (_i_alu_out_br)
  );
  PC i_pc (
    .clock    (clock),
    .reset    (reset),
    .in_din   (_i_npc_out_npc),
    .in_stall (_data_hazard_detector_out_stall_PC),
    .out_pc   (_i_pc_out_pc)
  );
  NPC i_npc (
    .in_pc      (_i_pc_out_pc),
    .in_jump    (_i_jump_out_jump),
    .in_pc_jump (_i_jump_out_pc_jump),
    .out_npc    (_i_npc_out_npc)
  );
  RF i_rf (
    .clock   (clock),
    .reset   (reset),
    .in_rR1  (_reg_if_id_out_data_inst[19:15]),
    .in_rR2  (_reg_if_id_out_data_inst[24:20]),
    .in_wR   (_reg_mem_wb_out_data_wR),
    .in_wD   (_reg_mem_wb_out_data_wD),
    .in_we   (_reg_mem_wb_out_data_we),
    .out_rD1 (_i_rf_out_rD1),
    .out_rD2 (_i_rf_out_rD2)
  );
  SEXT i_sext (
    .in_din   (_reg_if_id_out_data_inst[31:7]),
    .in_op    (_i_ctrl_out_sext_op),
    .out_dout (_i_sext_out_dout)
  );
  JumpMux i_jump (
    .in_branch   (_reg_id_ex_out_basic_data_branch),
    .in_bf       (_i_alu_out_br),
    .in_pc       (_reg_id_ex_out_basic_data_pc),
    .in_imm      (_reg_id_ex_out_basic_data_imm),
    .in_alu_res  (_i_alu_out_res),
    .out_jump    (_i_jump_out_jump),
    .out_pc_jump (_i_jump_out_pc_jump)
  );
  REG_IF_ID reg_if_id (
    .clock         (clock),
    .reset         (reset),
    .signal_stall  (_data_hazard_detector_out_stall_REG_IF_ID),
    .signal_flush  (_control_hazard_detector_out_flush_REG_IF_ID),
    .in_data_pc    (_i_pc_out_pc),
    .in_data_inst  (io_irom_inst),
    .out_data_pc   (_reg_if_id_out_data_pc),
    .out_data_inst (_reg_if_id_out_data_inst)
  );
  REG_ID_EX reg_id_ex (
    .clock                   (clock),
    .reset                   (reset),
    .signal_flush
      (_data_hazard_detector_out_flush_REG_ID_EX
       | _control_hazard_detector_out_flush_REG_ID_EX),
    .forward_forward_op1     (_data_hazard_detector_out_forward_op1),
    .forward_forward_op2     (_data_hazard_detector_out_forward_op2),
    .forward_forward_rD1     (_data_hazard_detector_out_forward_rD1),
    .forward_forward_rD2     (_data_hazard_detector_out_forward_rD2),
    .in_basic_data_wR        (_reg_if_id_out_data_inst[11:7]),
    .in_basic_data_pc        (_reg_if_id_out_data_pc),
    .in_basic_data_imm       (_i_sext_out_dout),
    .in_basic_data_has_inst  (_i_ctrl_out_has_inst),
    .in_basic_data_rf_wsel   (_i_ctrl_out_rf_wsel),
    .in_basic_data_rf_we     (_i_ctrl_out_rf_we),
    .in_basic_data_branch    (_i_ctrl_out_branch),
    .in_basic_data_ram_we    (_i_ctrl_out_ram_we),
    .in_basic_data_alu_op    (_i_ctrl_out_alu_op),
    .in_basic_data_alu_bsel  (_i_ctrl_out_alu_bsel),
    .out_basic_data_wR       (_reg_id_ex_out_basic_data_wR),
    .out_basic_data_pc       (_reg_id_ex_out_basic_data_pc),
    .out_basic_data_imm      (_reg_id_ex_out_basic_data_imm),
    .out_basic_data_has_inst (_reg_id_ex_out_basic_data_has_inst),
    .out_basic_data_rf_wsel  (_reg_id_ex_out_basic_data_rf_wsel),
    .out_basic_data_rf_we    (_reg_id_ex_out_basic_data_rf_we),
    .out_basic_data_branch   (_reg_id_ex_out_basic_data_branch),
    .out_basic_data_ram_we   (_reg_id_ex_out_basic_data_ram_we),
    .out_basic_data_alu_op   (_reg_id_ex_out_basic_data_alu_op),
    .out_basic_data_alu_bsel (_reg_id_ex_out_basic_data_alu_bsel),
    .in_reg_rD1              (_i_rf_out_rD1),
    .in_reg_rD2              (_i_rf_out_rD2),
    .out_reg_rD1             (_reg_id_ex_out_reg_rD1),
    .out_reg_rD2             (_reg_id_ex_out_reg_rD2)
  );
  REG_EX_MEM reg_ex_mem (
    .clock             (clock),
    .reset             (reset),
    .in_data_wR        (_reg_id_ex_out_basic_data_wR),
    .in_data_wD        (_rf_mux1_out_wD),
    .in_data_pc        (_reg_id_ex_out_basic_data_pc),
    .in_data_rD2       (_reg_id_ex_out_reg_rD2),
    .in_data_alu_res   (_i_alu_out_res),
    .in_data_has_inst  (_reg_id_ex_out_basic_data_has_inst),
    .in_data_rf_wsel   (_reg_id_ex_out_basic_data_rf_wsel),
    .in_data_rf_we     (_reg_id_ex_out_basic_data_rf_we),
    .in_data_ram_we    (_reg_id_ex_out_basic_data_ram_we),
    .out_data_wR       (_reg_ex_mem_out_data_wR),
    .out_data_wD       (_reg_ex_mem_out_data_wD),
    .out_data_pc       (_reg_ex_mem_out_data_pc),
    .out_data_rD2      (io_bus_bus_out),
    .out_data_alu_res  (io_bus_addr),
    .out_data_has_inst (_reg_ex_mem_out_data_has_inst),
    .out_data_rf_wsel  (_reg_ex_mem_out_data_rf_wsel),
    .out_data_rf_we    (_reg_ex_mem_out_data_rf_we),
    .out_data_ram_we   (io_bus_we)
  );
  REG_MEM_WB reg_mem_wb (
    .clock             (clock),
    .reset             (reset),
    .in_data_wR        (_reg_ex_mem_out_data_wR),
    .in_data_wD        (_rf_mux2_out_wD),
    .in_data_pc        (_reg_ex_mem_out_data_pc),
    .in_data_we        (_reg_ex_mem_out_data_rf_we),
    .in_data_has_inst  (_reg_ex_mem_out_data_has_inst),
    .out_data_wR       (_reg_mem_wb_out_data_wR),
    .out_data_wD       (_reg_mem_wb_out_data_wD),
    .out_data_pc       (trace_pc),
    .out_data_we       (_reg_mem_wb_out_data_we),
    .out_data_has_inst (trace_have_inst)
  );
  DataHazardDetector data_hazard_detector (
    .in_ID_readR1        (_i_ctrl_out_ID_read1),
    .in_ID_readR2        (_i_ctrl_out_ID_read2),
    .in_ID_rR1           (_reg_if_id_out_data_inst[19:15]),
    .in_ID_rR2           (_reg_if_id_out_data_inst[24:20]),
    .in_EX_rf_wsel       (_reg_id_ex_out_basic_data_rf_wsel),
    .in_EX_rf_wen        (_reg_id_ex_out_basic_data_rf_we),
    .in_EX_wR            (_reg_id_ex_out_basic_data_wR),
    .in_EX_wD            (_rf_mux1_out_wD),
    .in_MEM_rf_wen       (_reg_ex_mem_out_data_rf_we),
    .in_MEM_wR           (_reg_ex_mem_out_data_wR),
    .in_MEM_wD           (_rf_mux2_out_wD),
    .in_WB_rf_wen        (_reg_mem_wb_out_data_we),
    .in_WB_wR            (_reg_mem_wb_out_data_wR),
    .in_WB_wD            (_reg_mem_wb_out_data_wD),
    .out_stall_REG_IF_ID (_data_hazard_detector_out_stall_REG_IF_ID),
    .out_flush_REG_ID_EX (_data_hazard_detector_out_flush_REG_ID_EX),
    .out_stall_PC        (_data_hazard_detector_out_stall_PC),
    .out_forward_op1     (_data_hazard_detector_out_forward_op1),
    .out_forward_op2     (_data_hazard_detector_out_forward_op2),
    .out_forward_rD1     (_data_hazard_detector_out_forward_rD1),
    .out_forward_rD2     (_data_hazard_detector_out_forward_rD2)
  );
  ControlHazardDectector control_hazard_detector (
    .in_is_control_hazard (_i_jump_out_jump),
    .out_flush_REG_IF_ID  (_control_hazard_detector_out_flush_REG_IF_ID),
    .out_flush_REG_ID_EX  (_control_hazard_detector_out_flush_REG_ID_EX)
  );
  RFMux1 rf_mux1 (
    .in_wsel     (_reg_id_ex_out_basic_data_rf_wsel),
    .in_from_alu (_i_alu_out_res),
    .in_from_imm (_reg_id_ex_out_basic_data_imm),
    .in_from_pc  (_reg_id_ex_out_basic_data_pc),
    .out_wD      (_rf_mux1_out_wD)
  );
  RFMux2 rf_mux2 (
    .in_wsel      (_reg_ex_mem_out_data_rf_wsel),
    .in_wD        (_reg_ex_mem_out_data_wD),
    .in_from_dram (io_bus_bus_in),
    .out_wD       (_rf_mux2_out_wD)
  );
  assign io_irom_inst_addr = _i_pc_out_pc[15:0];
  assign trace_ena = _reg_mem_wb_out_data_we;
  assign trace_wb_reg = _reg_mem_wb_out_data_wR;
  assign trace_wb_value = _reg_mem_wb_out_data_wD;
endmodule

