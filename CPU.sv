// Generated by CIRCT firtool-1.62.0
module Control(
  input  [31:0] in_inst,
  input         in_br,
  output [1:0]  out_npc_op,
  output [3:0]  out_alu_op,
  output        out_alu_bsel,
  output [2:0]  out_sext_op,
  output        out_rf_we,
  output [1:0]  out_rf_wsel,
  output        out_ram_we
);

  wire            _GEN = in_inst[6:0] == 7'h19;
  wire            _GEN_0 = in_inst[6:0] == 7'h13;
  wire            _GEN_1 = in_inst[6:0] == 7'h3;
  wire            _GEN_2 = in_inst[6:0] == 7'h67;
  wire            _GEN_3 = in_inst[6:0] == 7'h23;
  wire            _GEN_4 = in_inst[6:0] == 7'h63;
  wire            _GEN_5 = _GEN | _GEN_0;
  wire            _GEN_6 = in_inst[14:12] == 3'h1;
  wire            _GEN_7 = in_inst[14:12] == 3'h5;
  wire [7:0][3:0] _GEN_8 =
    {{4'h2},
     {4'h3},
     {{3'h3, |(in_inst[31:25])}},
     {4'h4},
     {4'h0},
     {4'h0},
     {4'h5},
     {_GEN ? {3'h0, |(in_inst[31:25])} : 4'h0}};
  wire            _GEN_9 = _GEN_1 | _GEN_2 | _GEN_3;
  assign out_npc_op =
    _GEN | _GEN_0 | _GEN_1
      ? 2'h0
      : _GEN_2 ? 2'h3 : _GEN_3 | ~_GEN_4 ? 2'h0 : {1'h0, in_br};
  assign out_alu_op =
    _GEN_5
      ? _GEN_8[in_inst[14:12]]
      : _GEN_9 | ~_GEN_4
          ? 4'h0
          : in_inst[14:12] == 3'h0
              ? 4'h8
              : _GEN_6 ? 4'h9 : in_inst[14:12] == 3'h4 ? 4'hA : _GEN_7 ? 4'hB : 4'h8;
  assign out_alu_bsel = ~_GEN & (_GEN_0 | _GEN_9 | _GEN_4);
  assign out_sext_op =
    _GEN_0
      ? (_GEN_6 | _GEN_7 ? 3'h5 : 3'h0)
      : _GEN_1 | _GEN_2
          ? 3'h0
          : _GEN_3 ? 3'h1 : _GEN_4 ? 3'h2 : in_inst[6:0] == 7'h37 ? 3'h3 : 3'h0;
  assign out_rf_we = ~(_GEN_3 | _GEN_4);
  assign out_rf_wsel = _GEN_5 ? 2'h0 : {~_GEN_1, 1'h1};
  assign out_ram_we = _GEN_3;
endmodule

module ALU(
  input  [31:0] in_a,
                in_b,
                in_imm,
  input         in_sel,
  input  [3:0]  in_alu_op,
  output [31:0] out_res,
  output        out_br
);

  wire [31:0] b_ = in_sel ? in_imm : in_b;
  wire        _GEN = in_alu_op == 4'h0;
  wire        _GEN_0 = in_alu_op == 4'h1;
  wire        _GEN_1 = in_alu_op == 4'h2;
  wire        _GEN_2 = in_alu_op == 4'h3;
  wire        _GEN_3 = in_alu_op == 4'h4;
  wire        _GEN_4 = in_alu_op == 4'h5;
  wire [62:0] _out_res_T_7 = {31'h0, in_a} << b_[4:0];
  wire        _GEN_5 = in_alu_op == 4'h6;
  wire [31:0] _GEN_6 = {27'h0, b_[4:0]};
  wire        _GEN_7 = in_alu_op == 4'h7;
  assign out_res =
    _GEN
      ? in_a + b_
      : _GEN_0
          ? in_a - b_
          : _GEN_1
              ? in_a & b_
              : _GEN_2
                  ? in_a | b_
                  : _GEN_3
                      ? in_a ^ b_
                      : _GEN_4
                          ? _out_res_T_7[31:0]
                          : _GEN_5
                              ? in_a >> _GEN_6
                              : _GEN_7 ? $signed($signed(in_a) >>> _GEN_6) : 32'h0;
  assign out_br =
    ~(_GEN | _GEN_0 | _GEN_1 | _GEN_2 | _GEN_3 | _GEN_4 | _GEN_5 | _GEN_7)
    & (in_alu_op == 4'h8
         ? in_a == b_
         : in_alu_op == 4'h9
             ? in_a != b_
             : in_alu_op == 4'hA
                 ? $signed(in_a) < $signed(b_)
                 : in_alu_op == 4'hB & $signed(in_a) >= $signed(b_));
endmodule

module PC(
  input         clock,
                reset,
  input  [31:0] in_din,
  output [31:0] out_pc
);

  reg [31:0] output_0;
  always @(posedge clock) begin
    if (reset)
      output_0 <= 32'h0;
    else
      output_0 <= in_din;
  end // always @(posedge)
  assign out_pc = output_0;
endmodule

module NPC(
  input  [31:0] in_pc,
                in_offset,
  input         in_br,
  input  [1:0]  in_op,
  input  [31:0] in_alu_res,
  output [31:0] out_npc
);

  wire [3:0][31:0] _GEN =
    {{in_alu_res},
     {in_pc + in_offset},
     {in_br ? in_pc + in_offset : in_pc + 32'h4},
     {in_pc + 32'h4}};
  assign out_npc = _GEN[in_op];
endmodule

module RF(
  input         clock,
                reset,
  input  [4:0]  in_rR1,
                in_rR2,
                in_wR,
  input         in_we,
  input  [1:0]  in_wsel,
  input  [31:0] in_from_alu,
                in_from_dram,
                in_from_imm,
                in_from_pc,
  output [31:0] out_rD1,
                out_rD2
);

  reg  [31:0]       regs_0;
  reg  [31:0]       regs_1;
  reg  [31:0]       regs_2;
  reg  [31:0]       regs_3;
  reg  [31:0]       regs_4;
  reg  [31:0]       regs_5;
  reg  [31:0]       regs_6;
  reg  [31:0]       regs_7;
  reg  [31:0]       regs_8;
  reg  [31:0]       regs_9;
  reg  [31:0]       regs_10;
  reg  [31:0]       regs_11;
  reg  [31:0]       regs_12;
  reg  [31:0]       regs_13;
  reg  [31:0]       regs_14;
  reg  [31:0]       regs_15;
  reg  [31:0]       regs_16;
  reg  [31:0]       regs_17;
  reg  [31:0]       regs_18;
  reg  [31:0]       regs_19;
  reg  [31:0]       regs_20;
  reg  [31:0]       regs_21;
  reg  [31:0]       regs_22;
  reg  [31:0]       regs_23;
  reg  [31:0]       regs_24;
  reg  [31:0]       regs_25;
  reg  [31:0]       regs_26;
  reg  [31:0]       regs_27;
  reg  [31:0]       regs_28;
  reg  [31:0]       regs_29;
  reg  [31:0]       regs_30;
  reg  [31:0]       regs_31;
  wire [31:0][31:0] _GEN =
    {{regs_31},
     {regs_30},
     {regs_29},
     {regs_28},
     {regs_27},
     {regs_26},
     {regs_25},
     {regs_24},
     {regs_23},
     {regs_22},
     {regs_21},
     {regs_20},
     {regs_19},
     {regs_18},
     {regs_17},
     {regs_16},
     {regs_15},
     {regs_14},
     {regs_13},
     {regs_12},
     {regs_11},
     {regs_10},
     {regs_9},
     {regs_8},
     {regs_7},
     {regs_6},
     {regs_5},
     {regs_4},
     {regs_3},
     {regs_2},
     {regs_1},
     {regs_0}};
  always @(posedge clock) begin
    if (reset) begin
      regs_0 <= 32'h0;
      regs_1 <= 32'h0;
      regs_2 <= 32'h0;
      regs_3 <= 32'h0;
      regs_4 <= 32'h0;
      regs_5 <= 32'h0;
      regs_6 <= 32'h0;
      regs_7 <= 32'h0;
      regs_8 <= 32'h0;
      regs_9 <= 32'h0;
      regs_10 <= 32'h0;
      regs_11 <= 32'h0;
      regs_12 <= 32'h0;
      regs_13 <= 32'h0;
      regs_14 <= 32'h0;
      regs_15 <= 32'h0;
      regs_16 <= 32'h0;
      regs_17 <= 32'h0;
      regs_18 <= 32'h0;
      regs_19 <= 32'h0;
      regs_20 <= 32'h0;
      regs_21 <= 32'h0;
      regs_22 <= 32'h0;
      regs_23 <= 32'h0;
      regs_24 <= 32'h0;
      regs_25 <= 32'h0;
      regs_26 <= 32'h0;
      regs_27 <= 32'h0;
      regs_28 <= 32'h0;
      regs_29 <= 32'h0;
      regs_30 <= 32'h0;
      regs_31 <= 32'h0;
    end
    else begin
      automatic logic             _GEN_0 = in_we & (|in_wR);
      automatic logic [3:0][31:0] _GEN_1 =
        {{in_from_pc}, {in_from_imm}, {in_from_dram}, {32'h0}};
      automatic logic [31:0]      _GEN_2;
      _GEN_2 = in_wsel == 2'h0 ? in_from_alu : _GEN_1[in_wsel];
      if (~_GEN_0 | (|in_wR)) begin
      end
      else
        regs_0 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h1)
        regs_1 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h2)
        regs_2 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h3)
        regs_3 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h4)
        regs_4 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h5)
        regs_5 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h6)
        regs_6 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h7)
        regs_7 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h8)
        regs_8 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h9)
        regs_9 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'hA)
        regs_10 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'hB)
        regs_11 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'hC)
        regs_12 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'hD)
        regs_13 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'hE)
        regs_14 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'hF)
        regs_15 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h10)
        regs_16 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h11)
        regs_17 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h12)
        regs_18 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h13)
        regs_19 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h14)
        regs_20 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h15)
        regs_21 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h16)
        regs_22 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h17)
        regs_23 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h18)
        regs_24 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h19)
        regs_25 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h1A)
        regs_26 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h1B)
        regs_27 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h1C)
        regs_28 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h1D)
        regs_29 <= _GEN_2;
      if (_GEN_0 & in_wR == 5'h1E)
        regs_30 <= _GEN_2;
      if (_GEN_0 & (&in_wR))
        regs_31 <= _GEN_2;
    end
  end // always @(posedge)
  assign out_rD1 = _GEN[in_rR1];
  assign out_rD2 = _GEN[in_rR2];
endmodule

module SEXT(
  input  [24:0] in_din,
  input  [2:0]  in_op,
  output [31:0] out_dout
);

  wire [7:0][31:0] _GEN =
    {{32'h0},
     {32'h0},
     {32'h0},
     {{27'h0, in_din[17:13]}},
     {{in_din[24:5], 12'h0}},
     {{{20{in_din[24]}}, in_din[24:18], in_din[4:1], 1'h1}},
     {{{20{in_din[24]}}, in_din[24:18], in_din[4:0]}},
     {{{20{in_din[24]}}, in_din[24:13]}}};
  assign out_dout = _GEN[in_op];
endmodule

module CPU(
  input         clock,
                reset,
  output [15:0] io_irom_inst_addr,
  input  [31:0] io_irom_inst,
  output [31:0] io_dram_alu_res,
                io_dram_rD2,
  input  [31:0] io_dram_dram_rdata,
  output        io_dram_we
);

  wire [31:0] _i_sext_out_dout;
  wire [31:0] _i_rf_out_rD1;
  wire [31:0] _i_rf_out_rD2;
  wire [31:0] _i_npc_out_npc;
  wire [31:0] _i_pc_out_pc;
  wire [31:0] _i_alu_out_res;
  wire        _i_alu_out_br;
  wire [1:0]  _i_ctrl_out_npc_op;
  wire [3:0]  _i_ctrl_out_alu_op;
  wire        _i_ctrl_out_alu_bsel;
  wire [2:0]  _i_ctrl_out_sext_op;
  wire        _i_ctrl_out_rf_we;
  wire [1:0]  _i_ctrl_out_rf_wsel;
  Control i_ctrl (
    .in_inst      (io_irom_inst),
    .in_br        (_i_alu_out_br),
    .out_npc_op   (_i_ctrl_out_npc_op),
    .out_alu_op   (_i_ctrl_out_alu_op),
    .out_alu_bsel (_i_ctrl_out_alu_bsel),
    .out_sext_op  (_i_ctrl_out_sext_op),
    .out_rf_we    (_i_ctrl_out_rf_we),
    .out_rf_wsel  (_i_ctrl_out_rf_wsel),
    .out_ram_we   (io_dram_we)
  );
  ALU i_alu (
    .in_a      (_i_rf_out_rD1),
    .in_b      (_i_rf_out_rD2),
    .in_imm    (_i_sext_out_dout),
    .in_sel    (_i_ctrl_out_alu_bsel),
    .in_alu_op (_i_ctrl_out_alu_op),
    .out_res   (_i_alu_out_res),
    .out_br    (_i_alu_out_br)
  );
  PC i_pc (
    .clock  (clock),
    .reset  (reset),
    .in_din (_i_npc_out_npc),
    .out_pc (_i_pc_out_pc)
  );
  NPC i_npc (
    .in_pc      (_i_pc_out_pc),
    .in_offset  (_i_sext_out_dout),
    .in_br      (_i_alu_out_br),
    .in_op      (_i_ctrl_out_npc_op),
    .in_alu_res (_i_alu_out_res),
    .out_npc    (_i_npc_out_npc)
  );
  RF i_rf (
    .clock        (clock),
    .reset        (reset),
    .in_rR1       (io_irom_inst[19:15]),
    .in_rR2       (io_irom_inst[24:20]),
    .in_wR        (io_irom_inst[11:7]),
    .in_we        (_i_ctrl_out_rf_we),
    .in_wsel      (_i_ctrl_out_rf_wsel),
    .in_from_alu  (_i_alu_out_res),
    .in_from_dram (io_dram_dram_rdata),
    .in_from_imm  (_i_sext_out_dout),
    .in_from_pc   (_i_pc_out_pc),
    .out_rD1      (_i_rf_out_rD1),
    .out_rD2      (_i_rf_out_rD2)
  );
  SEXT i_sext (
    .in_din   (io_irom_inst[31:7]),
    .in_op    (_i_ctrl_out_sext_op),
    .out_dout (_i_sext_out_dout)
  );
  assign io_irom_inst_addr = _i_pc_out_pc[15:0];
  assign io_dram_alu_res = _i_alu_out_res;
  assign io_dram_rD2 = _i_rf_out_rD2;
endmodule

